/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.bju.cps450.analysis;

import com.bju.cps450.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAClasses(AClasses node);
    void caseAClassDefinition(AClassDefinition node);
    void caseAInheritsClass(AInheritsClass node);
    void caseAVariable(AVariable node);
    void caseABooleanType(ABooleanType node);
    void caseAIntType(AIntType node);
    void caseAStringType(AStringType node);
    void caseAClassType(AClassType node);
    void caseAArrayType(AArrayType node);
    void caseAMethod(AMethod node);
    void caseAArgument(AArgument node);
    void caseAIfStatementStatement(AIfStatementStatement node);
    void caseALoopStatementStatement(ALoopStatementStatement node);
    void caseACallStatementStatement(ACallStatementStatement node);
    void caseAAssignStatementStatement(AAssignStatementStatement node);
    void caseAOrExpression(AOrExpression node);
    void caseAAndExpression(AAndExpression node);
    void caseAEqualsExpression(AEqualsExpression node);
    void caseAGreaterExpression(AGreaterExpression node);
    void caseAGtEqualExpression(AGtEqualExpression node);
    void caseAConcatExpression(AConcatExpression node);
    void caseAAddExpression(AAddExpression node);
    void caseASubtractExpression(ASubtractExpression node);
    void caseAMultExpression(AMultExpression node);
    void caseADivideExpression(ADivideExpression node);
    void caseAPosExpression(APosExpression node);
    void caseANegExpression(ANegExpression node);
    void caseANotExpression(ANotExpression node);
    void caseAIdentifierExpression(AIdentifierExpression node);
    void caseAStringExpression(AStringExpression node);
    void caseAIntegerExpression(AIntegerExpression node);
    void caseATrueExpression(ATrueExpression node);
    void caseAFalseExpression(AFalseExpression node);
    void caseANullExpression(ANullExpression node);
    void caseAMeExpression(AMeExpression node);
    void caseANewExpression(ANewExpression node);
    void caseACallExpression(ACallExpression node);
    void caseAArrayExpression(AArrayExpression node);
    void caseAParenExpression(AParenExpression node);
    void caseAInitializer(AInitializer node);

    void caseTNewline(TNewline node);
    void caseTComment(TComment node);
    void caseTWhitespace(TWhitespace node);
    void caseTContinuation(TContinuation node);
    void caseTIntegerLiteral(TIntegerLiteral node);
    void caseTStringLiteral(TStringLiteral node);
    void caseTUnterminatedString(TUnterminatedString node);
    void caseTIllegalString(TIllegalString node);
    void caseTBoolean(TBoolean node);
    void caseTBegin(TBegin node);
    void caseTClasskey(TClasskey node);
    void caseTElse(TElse node);
    void caseTEnd(TEnd node);
    void caseTFalse(TFalse node);
    void caseTFrom(TFrom node);
    void caseTIf(TIf node);
    void caseTInherits(TInherits node);
    void caseTInt(TInt node);
    void caseTIs(TIs node);
    void caseTLoop(TLoop node);
    void caseTMe(TMe node);
    void caseTNew(TNew node);
    void caseTNot(TNot node);
    void caseTNull(TNull node);
    void caseTString(TString node);
    void caseTThen(TThen node);
    void caseTTrue(TTrue node);
    void caseTWhile(TWhile node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTConcatenate(TConcatenate node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMultiply(TMultiply node);
    void caseTDivide(TDivide node);
    void caseTGreater(TGreater node);
    void caseTGreaterEqual(TGreaterEqual node);
    void caseTEquals(TEquals node);
    void caseTAssignment(TAssignment node);
    void caseTLParen(TLParen node);
    void caseTRParen(TRParen node);
    void caseTLBracket(TLBracket node);
    void caseTRBracket(TRBracket node);
    void caseTComma(TComma node);
    void caseTSemicolon(TSemicolon node);
    void caseTColon(TColon node);
    void caseTDot(TDot node);
    void caseTIdentifier(TIdentifier node);
    void caseTUnknownCharacter(TUnknownCharacter node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
