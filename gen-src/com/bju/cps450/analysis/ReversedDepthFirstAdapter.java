/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.bju.cps450.analysis;

import java.util.*;
import com.bju.cps450.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPClasses().apply(this);
        outStart(node);
    }

    public void inAClasses(AClasses node)
    {
        defaultIn(node);
    }

    public void outAClasses(AClasses node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClasses(AClasses node)
    {
        inAClasses(node);
        {
            List<PClassDefinition> copy = new ArrayList<PClassDefinition>(node.getClassDefinition());
            Collections.reverse(copy);
            for(PClassDefinition e : copy)
            {
                e.apply(this);
            }
        }
        outAClasses(node);
    }

    public void inAClassDefinition(AClassDefinition node)
    {
        defaultIn(node);
    }

    public void outAClassDefinition(AClassDefinition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassDefinition(AClassDefinition node)
    {
        inAClassDefinition(node);
        if(node.getLast() != null)
        {
            node.getLast().apply(this);
        }
        {
            List<PMethod> copy = new ArrayList<PMethod>(node.getMethod());
            Collections.reverse(copy);
            for(PMethod e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PVariable> copy = new ArrayList<PVariable>(node.getVariable());
            Collections.reverse(copy);
            for(PVariable e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getInheritsClass() != null)
        {
            node.getInheritsClass().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        outAClassDefinition(node);
    }

    public void inAInheritsClass(AInheritsClass node)
    {
        defaultIn(node);
    }

    public void outAInheritsClass(AInheritsClass node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInheritsClass(AInheritsClass node)
    {
        inAInheritsClass(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAInheritsClass(node);
    }

    public void inAVariable(AVariable node)
    {
        defaultIn(node);
    }

    public void outAVariable(AVariable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariable(AVariable node)
    {
        inAVariable(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAVariable(node);
    }

    public void inABooleanType(ABooleanType node)
    {
        defaultIn(node);
    }

    public void outABooleanType(ABooleanType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanType(ABooleanType node)
    {
        inABooleanType(node);
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        outABooleanType(node);
    }

    public void inAIntType(AIntType node)
    {
        defaultIn(node);
    }

    public void outAIntType(AIntType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntType(AIntType node)
    {
        inAIntType(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntType(node);
    }

    public void inAStringType(AStringType node)
    {
        defaultIn(node);
    }

    public void outAStringType(AStringType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringType(AStringType node)
    {
        inAStringType(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringType(node);
    }

    public void inAClassType(AClassType node)
    {
        defaultIn(node);
    }

    public void outAClassType(AClassType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassType(AClassType node)
    {
        inAClassType(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAClassType(node);
    }

    public void inAArrayType(AArrayType node)
    {
        defaultIn(node);
    }

    public void outAArrayType(AArrayType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayType(AArrayType node)
    {
        inAArrayType(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAArrayType(node);
    }

    public void inAMethod(AMethod node)
    {
        defaultIn(node);
    }

    public void outAMethod(AMethod node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethod(AMethod node)
    {
        inAMethod(node);
        if(node.getLast() != null)
        {
            node.getLast().apply(this);
        }
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatement());
            Collections.reverse(copy);
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PVariable> copy = new ArrayList<PVariable>(node.getVariable());
            Collections.reverse(copy);
            for(PVariable e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        {
            List<PArgument> copy = new ArrayList<PArgument>(node.getArgument());
            Collections.reverse(copy);
            for(PArgument e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        outAMethod(node);
    }

    public void inAArgument(AArgument node)
    {
        defaultIn(node);
    }

    public void outAArgument(AArgument node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgument(AArgument node)
    {
        inAArgument(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAArgument(node);
    }

    public void inAIfStatementStatement(AIfStatementStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatementStatement(AIfStatementStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStatementStatement(AIfStatementStatement node)
    {
        inAIfStatementStatement(node);
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getElse());
            Collections.reverse(copy);
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getIf());
            Collections.reverse(copy);
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAIfStatementStatement(node);
    }

    public void inALoopStatementStatement(ALoopStatementStatement node)
    {
        defaultIn(node);
    }

    public void outALoopStatementStatement(ALoopStatementStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALoopStatementStatement(ALoopStatementStatement node)
    {
        inALoopStatementStatement(node);
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatement());
            Collections.reverse(copy);
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outALoopStatementStatement(node);
    }

    public void inACallStatementStatement(ACallStatementStatement node)
    {
        defaultIn(node);
    }

    public void outACallStatementStatement(ACallStatementStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallStatementStatement(ACallStatementStatement node)
    {
        inACallStatementStatement(node);
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getExpression());
            Collections.reverse(copy);
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        outACallStatementStatement(node);
    }

    public void inAAssignStatementStatement(AAssignStatementStatement node)
    {
        defaultIn(node);
    }

    public void outAAssignStatementStatement(AAssignStatementStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignStatementStatement(AAssignStatementStatement node)
    {
        inAAssignStatementStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getArray());
            Collections.reverse(copy);
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAAssignStatementStatement(node);
    }

    public void inAOrExpression(AOrExpression node)
    {
        defaultIn(node);
    }

    public void outAOrExpression(AOrExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrExpression(AOrExpression node)
    {
        inAOrExpression(node);
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        outAOrExpression(node);
    }

    public void inAAndExpression(AAndExpression node)
    {
        defaultIn(node);
    }

    public void outAAndExpression(AAndExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExpression(AAndExpression node)
    {
        inAAndExpression(node);
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        outAAndExpression(node);
    }

    public void inAEqualsExpression(AEqualsExpression node)
    {
        defaultIn(node);
    }

    public void outAEqualsExpression(AEqualsExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualsExpression(AEqualsExpression node)
    {
        inAEqualsExpression(node);
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        outAEqualsExpression(node);
    }

    public void inAGreaterExpression(AGreaterExpression node)
    {
        defaultIn(node);
    }

    public void outAGreaterExpression(AGreaterExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterExpression(AGreaterExpression node)
    {
        inAGreaterExpression(node);
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        outAGreaterExpression(node);
    }

    public void inAGtEqualExpression(AGtEqualExpression node)
    {
        defaultIn(node);
    }

    public void outAGtEqualExpression(AGtEqualExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtEqualExpression(AGtEqualExpression node)
    {
        inAGtEqualExpression(node);
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        outAGtEqualExpression(node);
    }

    public void inAConcatExpression(AConcatExpression node)
    {
        defaultIn(node);
    }

    public void outAConcatExpression(AConcatExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConcatExpression(AConcatExpression node)
    {
        inAConcatExpression(node);
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        outAConcatExpression(node);
    }

    public void inAAddExpression(AAddExpression node)
    {
        defaultIn(node);
    }

    public void outAAddExpression(AAddExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddExpression(AAddExpression node)
    {
        inAAddExpression(node);
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        outAAddExpression(node);
    }

    public void inASubtractExpression(ASubtractExpression node)
    {
        defaultIn(node);
    }

    public void outASubtractExpression(ASubtractExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubtractExpression(ASubtractExpression node)
    {
        inASubtractExpression(node);
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        outASubtractExpression(node);
    }

    public void inAMultExpression(AMultExpression node)
    {
        defaultIn(node);
    }

    public void outAMultExpression(AMultExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultExpression(AMultExpression node)
    {
        inAMultExpression(node);
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        outAMultExpression(node);
    }

    public void inADivideExpression(ADivideExpression node)
    {
        defaultIn(node);
    }

    public void outADivideExpression(ADivideExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivideExpression(ADivideExpression node)
    {
        inADivideExpression(node);
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        outADivideExpression(node);
    }

    public void inAPosExpression(APosExpression node)
    {
        defaultIn(node);
    }

    public void outAPosExpression(APosExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPosExpression(APosExpression node)
    {
        inAPosExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAPosExpression(node);
    }

    public void inANegExpression(ANegExpression node)
    {
        defaultIn(node);
    }

    public void outANegExpression(ANegExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegExpression(ANegExpression node)
    {
        inANegExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outANegExpression(node);
    }

    public void inANotExpression(ANotExpression node)
    {
        defaultIn(node);
    }

    public void outANotExpression(ANotExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotExpression(ANotExpression node)
    {
        inANotExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outANotExpression(node);
    }

    public void inAIdentifierExpression(AIdentifierExpression node)
    {
        defaultIn(node);
    }

    public void outAIdentifierExpression(AIdentifierExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierExpression(AIdentifierExpression node)
    {
        inAIdentifierExpression(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierExpression(node);
    }

    public void inAStringExpression(AStringExpression node)
    {
        defaultIn(node);
    }

    public void outAStringExpression(AStringExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringExpression(AStringExpression node)
    {
        inAStringExpression(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outAStringExpression(node);
    }

    public void inAIntegerExpression(AIntegerExpression node)
    {
        defaultIn(node);
    }

    public void outAIntegerExpression(AIntegerExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerExpression(AIntegerExpression node)
    {
        inAIntegerExpression(node);
        if(node.getIntegerLiteral() != null)
        {
            node.getIntegerLiteral().apply(this);
        }
        outAIntegerExpression(node);
    }

    public void inATrueExpression(ATrueExpression node)
    {
        defaultIn(node);
    }

    public void outATrueExpression(ATrueExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueExpression(ATrueExpression node)
    {
        inATrueExpression(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueExpression(node);
    }

    public void inAFalseExpression(AFalseExpression node)
    {
        defaultIn(node);
    }

    public void outAFalseExpression(AFalseExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseExpression(AFalseExpression node)
    {
        inAFalseExpression(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseExpression(node);
    }

    public void inANullExpression(ANullExpression node)
    {
        defaultIn(node);
    }

    public void outANullExpression(ANullExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANullExpression(ANullExpression node)
    {
        inANullExpression(node);
        if(node.getNull() != null)
        {
            node.getNull().apply(this);
        }
        outANullExpression(node);
    }

    public void inAMeExpression(AMeExpression node)
    {
        defaultIn(node);
    }

    public void outAMeExpression(AMeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMeExpression(AMeExpression node)
    {
        inAMeExpression(node);
        if(node.getMe() != null)
        {
            node.getMe().apply(this);
        }
        outAMeExpression(node);
    }

    public void inANewExpression(ANewExpression node)
    {
        defaultIn(node);
    }

    public void outANewExpression(ANewExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANewExpression(ANewExpression node)
    {
        inANewExpression(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outANewExpression(node);
    }

    public void inACallExpression(ACallExpression node)
    {
        defaultIn(node);
    }

    public void outACallExpression(ACallExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallExpression(ACallExpression node)
    {
        inACallExpression(node);
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getExpression());
            Collections.reverse(copy);
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        outACallExpression(node);
    }

    public void inAArrayExpression(AArrayExpression node)
    {
        defaultIn(node);
    }

    public void outAArrayExpression(AArrayExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayExpression(AArrayExpression node)
    {
        inAArrayExpression(node);
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getExpression());
            Collections.reverse(copy);
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAArrayExpression(node);
    }

    public void inAParenExpression(AParenExpression node)
    {
        defaultIn(node);
    }

    public void outAParenExpression(AParenExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParenExpression(AParenExpression node)
    {
        inAParenExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAParenExpression(node);
    }
}
