Package com.bju.cps450;

Helpers

  tab                 = 9;
  line_feed           = 10;
  carriage_return     = 13;
  space               = ' ';
  single_quote        = ''';
  double_quote        = '"';
  letter              = [['a'..'z'] + ['A'..'Z']];
  octal               = ['0'..'7'];
  digit               = ['0'..'9'];
  escape              = '\' ( 't' | 'f' | 'n' | 'r' | '*' | '\' | double_quote | octal octal octal );
  printable           = [0..127];
  not_lf_or_cr        = [printable - [line_feed + carriage_return]];
  end_of_line         = (line_feed | carriage_return | carriage_return line_feed);

Tokens

  newline              = end_of_line;
  comment              = '~' not_lf_or_cr*;
  whitespace           = (tab | space)*;
  continuation         = '_' end_of_line;
  
  integer_literal      = ('-' digit+ | digit+);
  
  string_literal       = double_quote ([not_lf_or_cr - [double_quote + '\']] | escape)* double_quote;
  unterminated_string  = double_quote ([not_lf_or_cr - [double_quote + '\']] | escape)*;
  illegal_string       = double_quote ([not_lf_or_cr - double_quote])* double_quote;
  
  boolean              = 'boolean'; 
  begin                = 'begin'; 
  classkey             = 'class'; 
  else                 = 'else'; 
  end                  = 'end'; 
  false                = 'false'; 
  from                 = 'from'; 
  if                   = 'if'; 
  inherits             = 'inherits'; 
  int                  = 'int'; 
  is                   = 'is'; 
  loop                 = 'loop'; 
  me                   = 'me'; 
  new                  = 'new'; 
  not                  = 'not'; 
  null                 = 'null'; 
  string               = 'string'; 
  then                 = 'then'; 
  true                 = 'true'; 
  while                = 'while';
  and                  = 'and';
  or                   = 'or';
  
  concatenate          = '&'; 
  plus                 = '+'; 
  minus                = '-'; 
  multiply             = '*';
  divide               = '/';
  greater              = '>';
  greater_equal        = '>=';
  equals               = '=';
  assignment           = ':=';
  l_paren              = '(';
  r_paren              = ')';
  l_bracket            = '[';
  r_bracket            = ']';
  comma                = ',';
  semicolon            = ';';
  colon                = ':';
  dot                  = '.';
  
  identifier           = ('_' | letter) (letter | digit | '_')*;
  
  unknown_character    = printable;

Ignored Tokens

  comment, whitespace, continuation;
  
Productions

  classes {-> classes}  = newlines? class_definition classes_tail* T.newline* {-> New classes([class_definition.class_definition, classes_tail.class_definition]) };
  
  classes_tail {-> class_definition } = newlines class_definition {-> class_definition.class_definition };
  
  newlines              = T.newline+;
  
  class_definition {-> class_definition } = T.classkey [begin_id]:T.identifier inherits_clause? T.is newlines
                          variable_declarations*
                          method_declarations*
                          T.end [end_id]:T.identifier
						  {-> New class_definition(begin_id, inherits_clause.inherits_class, [variable_declarations.variable], [method_declarations.method], end_id) };
                        
  inherits_clause {-> inherits_class } = T.inherits T.from T.identifier {-> New inherits_class(identifier) };
                     
  variable_declarations {-> variable } = T.identifier type_declaration? initializer? newlines {-> New variable(identifier, type_declaration.type, initializer.expression) };
  
  type_declaration {-> type } = T.colon type {-> type.type};
  
  type {-> type }       = {boolean} T.boolean {-> New type.boolean(boolean) }
                        | {int}     T.int {-> New type.int(int) }
                        | {string}  T.string {-> New type.string(string) }
                        | {class}   T.identifier {-> New type.class(identifier) }
                        | {array}   type T.l_bracket expression? T.r_bracket {-> New type.array(type, expression) };
  
  initializer {-> expression } = T.assignment expression {-> expression.expression };
  
  method_declarations {-> method } = [begin_id]:T.identifier T.l_paren argument_list? T.r_paren type_declaration? T.is [begin_newlines]:newlines
						  variable_declarations*
						  T.begin [middle_newlines]:newlines
						  statement_list?
						  T.end [end_id]:T.identifier [end_newlines]:newlines {-> New method(begin_id, [argument_list.argument], type_declaration.type, [variable_declarations.variable], [statement_list.statement], end_id) };
  
  argument_list {-> argument* } = argument argument_list_tail* {-> [argument.argument, argument_list_tail.argument] };
  
  argument_list_tail {-> argument } = T.semicolon argument {-> argument.argument };
  
  argument {-> argument } = T.identifier type_declaration {-> New argument(identifier, type_declaration.type) };
  
  statement_list {-> statement* } = statement statement_list_tail* newlines {-> [statement.statement, statement_list_tail.statement] };
  
  statement_list_tail {-> statement } = newlines statement {-> statement.statement };
  
  statement {-> statement } = {if_statement}     if_statement {-> if_statement.statement }
                        | {loop_statement}   loop_statement {-> loop_statement.statement }
                        | {call_statement}   call_statement {-> call_statement.statement }
                        | {assign_statement} assignment_statement {-> assignment_statement.statement };
                        
  if_statement {-> statement } = [begin_if]:T.if expression T.then newlines
                          statement_list
                          else_statement?
                          T.end [end_if]:T.if {-> New statement.if_statement(expression.expression, [statement_list.statement], [else_statement.statement]) };
  
  else_statement {-> statement* } = T.else newlines
                          statement_list {-> [statement_list.statement]};
                          
  loop_statement {-> statement } = [begin_loop]:T.loop T.while expression newlines
                          statement_list
                          T.end [end_loop]:T.loop {-> New statement.loop_statement(expression.expression, [statement_list.statement])};
                          
  call_statement {-> statement } = [dot]:expression_dot? T.identifier T.l_paren expression_list? T.r_paren {-> New statement.call_statement(dot.expression, identifier, [expression_list.expression]) };
  
  assignment_statement {-> statement } = T.identifier array* T.assignment expression {-> New statement.assign_statement(identifier, [array.expression], expression.expression) };
                        
  expression_list {-> expression* } = expression expression_list_tail* {-> [expression.expression, expression_list_tail.expression] };
  
  expression_list_tail {-> expression } = T.comma expression {-> expression.expression };
  
  expression {-> expression } = expression_lvl8 {-> expression_lvl8.expression };
  
  expression_lvl8 {-> expression }      = {or}    expression_lvl8 T.or expression_lvl7 {-> New expression.or(expression_lvl8.expression, expression_lvl7.expression) }
                        | {other} expression_lvl7 {-> expression_lvl7.expression };
                        
  expression_lvl7 {-> expression }      = {and}   expression_lvl7 T.and expression_lvl6 {-> New expression.and(expression_lvl7.expression, expression_lvl6.expression) }
                        | {other} expression_lvl6 {-> expression_lvl6.expression};
                        
  expression_lvl6 {-> expression }      = {equals}   [first]:expression_lvl5 T.equals [second]:expression_lvl5 {-> New expression.equals(first.expression, second.expression) }
                        | {greater}  [first]:expression_lvl5 T.greater [second]:expression_lvl5 {-> New expression.greater(first.expression, second.expression) }
                        | {gt_equal} [first]:expression_lvl5 T.greater_equal [second]:expression_lvl5 {-> New expression.gt_equal(first.expression, second.expression) }
                        | {other}    expression_lvl5 {-> expression_lvl5.expression}; 
                        
  expression_lvl5 {-> expression }      = {concat} expression_lvl5 T.concatenate expression_lvl4 {-> New expression.concat(expression_lvl5.expression, expression_lvl4.expression) }
                        | {other}  expression_lvl4 {-> expression_lvl4.expression};
                        
  expression_lvl4 {-> expression }      = {add}      expression_lvl4 T.plus expression_lvl3 {-> New expression.add(expression_lvl4.expression, expression_lvl3.expression) }
                        | {subtract} expression_lvl4 T.minus expression_lvl3 {-> New expression.subtract(expression_lvl4.expression, expression_lvl3.expression) }
                        | {other}    expression_lvl3 {-> expression_lvl3.expression};
                        
  expression_lvl3 {-> expression }      = {mult}   expression_lvl3 T.multiply expression_lvl2 {-> New expression.mult(expression_lvl3.expression, expression_lvl2.expression) }
                        | {divide} expression_lvl3 T.divide expression_lvl2 {-> New expression.divide(expression_lvl3.expression, expression_lvl2.expression) }
                        | {other}  expression_lvl2 {-> expression_lvl2.expression};
                        
  expression_lvl2 {-> expression }      = {pos}   T.plus expression_lvl2 {-> expression_lvl2.expression}
                        | {neg}   T.minus expression_lvl2 {-> expression_lvl2.expression}
                        | {not}   T.not expression_lvl2 {-> expression_lvl2.expression}
                        | {other} expression_lvl1 {-> expression_lvl1.expression};
                        
  expression_lvl1 {-> expression }      = {identifier} T.identifier {-> New expression.identifier(identifier) }
                        | {string}     T.string_literal {-> New expression.string(string_literal) }
                        | {integer}    T.integer_literal {-> New expression.integer(integer_literal) }
                        | {true}       T.true {-> New expression.true(true) }
                        | {false}      T.false {-> New expression.false(false) }
                        | {null}       T.null {-> New expression.null(null) }
                        | {me}         T.me{-> New expression.me(me) }
                        | {new}        T.new type {-> New expression.new(type.type) }
                        | {call}       [dot]:expression_dot? T.identifier T.l_paren expression_list? T.r_paren {-> New expression.call(dot.expression, identifier, [expression_list.expression]) }
                        | {array}      T.identifier array+ {-> New expression.array(identifier, [array.expression]) }
                        | {paren}      T.l_paren expression T.r_paren {-> expression.expression };
  
  expression_dot {-> expression } = expression_lvl1 T.dot {-> expression_lvl1.expression};
  
  array {-> expression }          = T.l_bracket expression T.r_bracket {-> expression.expression };
  
Abstract Syntax Tree

  classes               = class_definition*; 
  
  class_definition      = [first]:identifier inherits_class? 
                          variable*
                          method*
                          [last]:identifier;
                        
  inherits_class        = identifier;
                     
  variable				= identifier type? expression?;  
  
  type                  = {boolean} boolean
                        | {int}     int
                        | {string}  string
                        | {class}   identifier
                        | {array}   type expression?;
  
  
  method                = [first]:identifier argument* type?
						  variable*						  
						  statement*
						  [last]:identifier;
    
  argument              = identifier type;
    
  statement             = {if_statement}     expression [if]:statement* [else]:statement*  
                        | {loop_statement}   expression statement*
                        | {call_statement}   [dot]:expression? identifier expression*
                        | {assign_statement} identifier [array]:expression* expression;                     
                          
  expression = {or}  [lhs]:expression [rhs]:expression
			| {and} [lhs]:expression [rhs]:expression
			| {equals} [lhs]:expression [rhs]:expression
			| {greater} [lhs]:expression [rhs]:expression
			| {gt_equal} [lhs]:expression [rhs]:expression
			| {concat} [lhs]:expression [rhs]:expression
			| {add} [lhs]:expression [rhs]:expression
			| {subtract} [lhs]:expression [rhs]:expression
			| {mult} [lhs]:expression [rhs]:expression
			| {divide} [lhs]:expression [rhs]:expression
			| {pos} expression
			| {neg} expression
			| {not} expression
			| {identifier} identifier
			| {string} string_literal
			| {integer} integer_literal
			| {true} true
			| {false} false
            | {null} null 
            | {me} me 
            | {new} type  
            | {call} [dot]:expression? identifier expression*
            | {array} identifier expression*
            | {paren} expression;
  

  
  
  
  
  